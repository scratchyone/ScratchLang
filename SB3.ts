import { v4 as uuidv4 } from 'uuid';
import { InputValue } from './types';

export class SB3 {
  meta: Meta;
  targets: Array<Target>;
  constructor({ meta, targets }: { meta: Meta; targets: Array<Target> }) {
    this.meta = meta;
    this.targets = targets;
  }
  static empty(): SB3 {
    return new SB3({ meta: new Meta(), targets: [Target.emptyStage()] });
  }
  json() {
    return {
      meta: this.meta.json(),
      targets: this.targets.map((t) => t.json()),
      monitors: [],
      extensions: [],
    };
  }
  addSprite(sprite: Target) {
    this.targets.push(sprite);
    return sprite;
  }
}
export class Meta {
  constructor() {}
  json() {
    return {
      semver: '3.0.0',
      vm: '0.2.0-prerelease.20201016122132',
      agent:
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36',
    };
  }
}
export class Target {
  isStage: boolean;
  name: string;
  variables: Array<Variable>;
  blocks: Array<Block>;
  broadcasts: Array<TargetBroadcast>;
  lists: Array<List>;
  constructor({
    isStage,
    name,
    variables,
    blocks,
    broadcasts,
    lists,
  }: {
    isStage: boolean;
    name: string;
    variables: Array<Variable>;
    blocks: Array<Block>;
    broadcasts: Array<TargetBroadcast>;
    lists: Array<List>;
  }) {
    this.isStage = isStage;
    this.name = name;
    this.variables = variables;
    this.blocks = blocks;
    this.broadcasts = broadcasts;
    this.lists = lists;
  }
  json() {
    const vars: { [key: string]: [string, string | number] } = {};
    for (const svar of this.variables) vars[svar.id] = [svar.name, svar.value];
    const lists: { [key: string]: [string, Array<string | number>] } = {};
    for (const list of this.lists) lists[list.id] = [list.name, list.value];
    const blocks: { [key: string]: unknown } = {};
    for (const block of this.blocks) blocks[block.id] = block.json();
    const broadcasts: { [key: string]: unknown } = {};
    for (const broadcast of this.broadcasts)
      broadcasts[broadcast.id] = broadcast.json();
    return {
      isStage: this.isStage,
      name: this.name,
      variables: vars,
      lists: lists,
      broadcasts: broadcasts,
      blocks: blocks,
      comments: {
        [uuidv4()]: {
          blockId: null,
          x: 41.481481481481296,
          y: 26.666666666666515,
          width: 185.1851806640625,
          height: 94.81481170654297,
          minimized: false,
          text: 'Generated by scratchLang v1.0.0',
        },
      },
      currentCostume: 0,
      costumes: [
        {
          assetId: 'cd21514d0531fdffb22204e0ec5ed84a',
          name: 'backdrop1',
          md5ext: 'cd21514d0531fdffb22204e0ec5ed84a.svg',
          dataFormat: 'svg',
          rotationCenterX: 240,
          rotationCenterY: 180,
        },
      ],
      sounds: [],
      volume: 100,
      ...(this.isStage
        ? {
            tempo: 60,
            videoTransparency: 50,
            videoState: 'on',
            textToSpeechLanguage: null,
            layerOrder: 0,
          }
        : {
            visible: true,
            x: 14,
            y: -27,
            size: 100,
            direction: 90,
            draggable: false,
            rotationStyle: 'all around',
            layerOrder: 1,
          }),
    };
  }
  static emptyStage() {
    return new Target({
      isStage: true,
      name: 'Stage',
      variables: [],
      blocks: [],
      broadcasts: [],
      lists: [],
    });
  }
  static emptyCat() {
    return new Target({
      isStage: false,
      name: 'Sprite',
      variables: [],
      blocks: [],
      broadcasts: [],
      lists: [],
    });
  }
  addVariable(name: string, value: string | number) {
    this.variables.push(new Variable(name, value, uuidv4()));
  }
  addList(name: string, value: Array<string | number>): List {
    const list = new List(name, value, uuidv4());
    this.lists.push(list);
    return list;
  }
  addBlock(block: Block) {
    this.blocks.push(block);
  }
  addBroadcast(name: string) {
    const broadcast = TargetBroadcast.createNew(name);
    this.broadcasts.push(broadcast);
    return broadcast.id;
  }
}
export class Variable {
  id: string;
  name: string;
  value: string | number;
  constructor(name: string, value: string | number, id: string) {
    this.id = id;
    this.name = name;
    this.value = value;
  }
}
export class List {
  id: string;
  name: string;
  value: Array<string | number>;
  constructor(name: string, value: Array<string | number>, id: string) {
    this.id = id;
    this.name = name;
    this.value = value;
  }
}
export class TargetBroadcast {
  id: string;
  name: string;
  constructor(name: string, id: string) {
    this.id = id;
    this.name = name;
  }
  static createNew(name: string): TargetBroadcast {
    return new TargetBroadcast(name, uuidv4());
  }
  json() {
    return this.name;
  }
}
type BlockOpCode =
  | 'event_whenflagclicked'
  | 'looks_nextbackdrop'
  | 'event_whenbroadcastreceived'
  | 'event_broadcastandwait'
  | 'looks_say'
  | 'data_insertatlist'
  | 'data_itemoflist'
  | 'data_deleteoflist'
  | 'looks_sayforsecs'
  | 'event_broadcast'
  | 'data_itemoflist';
export class Block {
  id: string;
  opcode: BlockOpCode;
  next: string | null;
  parent: string | null;
  topLevel: boolean;
  fields: Array<Field>;
  inputs: Array<Input>;
  x?: number;
  constructor(
    id: string,
    opcode: BlockOpCode,
    next: string | null,
    parent: string | null,
    topLevel: boolean,
    fields: Array<Field>,
    inputs: Array<Input>,
    x?: number
  ) {
    this.id = id;
    this.opcode = opcode;
    this.next = next;
    this.parent = parent;
    this.topLevel = topLevel;
    this.fields = fields;
    this.inputs = inputs;
    this.x = x;
  }
  json() {
    const fields: { [key: string]: unknown } = {};
    for (const field of this.fields) fields[field.name] = field.json();
    const inputs: { [key: string]: unknown } = {};
    for (const input of this.inputs) inputs[input.name] = input.json();
    return {
      opcode: this.opcode,
      next: this.next,
      parent: this.parent,
      inputs: inputs,
      fields: fields,
      shadow: false,
      topLevel: this.topLevel,
      y: 150,
      x: this.x,
    };
  }
  static createTopLevelBlock(
    opcode: BlockOpCode,
    fields: Array<Field>,
    inputs: Array<Input>,
    x: number
  ): Block {
    return new Block(uuidv4(), opcode, null, null, true, fields, inputs, x);
  }
  createChild(
    opcode: BlockOpCode,
    fields: Array<Field>,
    inputs: Array<Input>
  ): Block {
    const newid = uuidv4();
    this.next = newid;
    return new Block(newid, opcode, null, this.id, false, fields, inputs);
  }
  addChild(block: Block, next?: boolean): Block {
    block.parent = this.id;
    this.next = block.id;
    return block;
  }
}
export class Field {
  name: string;
  value: string;
  id?: string;
  constructor(name: string, value: string, id?: string) {
    this.name = name;
    this.value = value;
    this.id = id;
  }
  json() {
    return [this.value, this.id];
  }
  static createNewField(name: string, value: string, id?: string) {
    return new Field(name, value, id);
  }
}
export enum InputType {
  Broadcast = 11,
  Text = 10,
  Int = 7,
  MathNum = 4,
}
export class Input {
  name: string;
  shadow: 'shadow' | 'none' | 'obscured';
  data: unknown;
  constructor(
    name: string,
    shadow: 'shadow' | 'none' | 'obscured',
    data: unknown
  ) {
    this.name = name;
    this.shadow = shadow;
    this.data = data;
  }
  json() {
    let shadow;
    if (this.shadow === 'shadow') shadow = 1;
    if (this.shadow === 'none') shadow = 2;
    if (this.shadow === 'obscured') shadow = 3;
    return [shadow, this.data];
  }
}
